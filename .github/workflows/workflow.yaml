name: Unit-level tests xcube-geodb-openeo


on:
  workflow_dispatch:
  push:


env:
  APP_NAME: xcube-geodb-openeo
  ORG_NAME: bcdev

  SKIP_UNITTESTS: "0"
  WAIT_FOR_STARTUP: "1"


jobs:
  unittest:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l {0}
    steps:
      - run: |
          echo "SKIP_UNITTESTS: ${{ env.SKIP_UNITTESTS }}"
      - uses: actions/checkout@v3
        name: Checkout xcube-geodb-openeo repo
      - name: Checkout xcube repo
        uses: actions/checkout@v3
        with:
          repository: dcs4cop/xcube
          path: "xcube"
          ref: forman-676-server_redesign
      - uses: conda-incubator/setup-miniconda@v2
        if: ${{ env.SKIP_UNITTESTS == '0' }}
        with:
          mamba-version: "*"
          channels: conda-forge
          auto-update-conda: false
          activate-environment: xcube-geodb-openeo
          environment-file: environment.yml
      - run: |
          conda info
          conda list
          conda config --show-sources
          conda config --show
          printenv | sort
      - name: setup-xcube
        run: |
          cd xcube
          conda env update -n xcube-geodb-openeo -f environment.yml
          pip install -e .
          cd ..
      - name: setup-xcube-geodb-openeo
        run: |
          pip install -e .
      - name: unittest-xcube-geodb-openeo
        if: ${{ env.SKIP_UNITTESTS == '0' }}
        run: |
          pytest --cov=./ --cov-report=xml --tb=native tests
      - uses: codecov/codecov-action@v2
        if: ${{ env.SKIP_UNITTESTS == '0' }}
        with:
          fail_ci_if_error: true
          verbose: false

  build-docker-image:
    runs-on: ubuntu-latest
    needs: [unittest]
    name: build-docker-image
    steps:
      # Checkout xcube-geodb-openeo (this project)
      - name: git-checkout
        uses: actions/checkout@v2
      # Get the base release tag used in docker images
      - name: get-release-tag
        id: release
        run: echo ::set-output name=tag::${GITHUB_REF#refs/*/}
      # The docker image always needs the version as in version.py
      - name: get-xcube-geodb-openeo-version
        id: real-version
        run: |
          VERSION=$(echo "`cat xcube_geodb_openeo/version.py | grep version | cut -d "'" -f2`")
          echo ::set-output name=version::${VERSION}
      # Determine the deployment phase (dev/stage/prod) will be 'ignore' if a dev branch is processed
      - name: deployment-phase
        id: deployment-phase
        uses: bc-org/gha-determine-phase@v0.1
        with:
          event_name: ${{ github.event_name }}
          tag: ${{ steps.release.outputs.tag }}
      - name: info
        id: info
        run: |
          echo "TAG: ${{ steps.release.outputs.tag }}"
          echo "DEPLOYMENT_PHASE: ${{ steps.deployment-phase.outputs.phase }}"
          echo "REAL_VERSION: ${{ steps.real-version.outputs.version }}"
          echo "EVENT: ${{ github.event_name }}"
      # Build docker image
      - uses: mr-smithers-excellent/docker-build-push@v5.5
        name: build-and-push-docker-image
        if: ${{ steps.deployment-phase.outputs.phase != 'ignore' }}
        with:
          image: ${{ env.ORG_NAME }}/${{ env.APP_NAME }}-server
          directory: xcube_geodb_openeo
          dockerfile: docker/Dockerfile
          addLatest: true
          registry: quay.io
          buildArgs: GEODB_OPENEO_VERSION=${{ steps.real-version.outputs.tag }}
          username: ${{ secrets.QUAY_REG_USERNAME }}
          password: ${{ secrets.QUAY_REG_PASSWORD }}
  #update-version-deployment:
  #  env:
  #    PUSH: 1
  #  runs-on: ubuntu-latest
  #  needs: build-docker-image
  #  name: update-tag
  #  steps:
  #    - name: git-checkout
  #      uses: actions/checkout@v2
  #    # Clone k8s-config into path 'k8s'
  #    - uses: actions/checkout@v2
  #      with:
  #        repository: bc-org/k8s-configs
  #        token: ${{ secrets.API_TOKEN_GITHUB }}
  #        path: k8s
  #    # Get the release tag (or main on push)
  #    - name: get-release-tag
  #      id: release
  #      run: echo ::set-output name=tag::${GITHUB_REF#refs/*/}
  #    # Determine the deployment phase
  #    - name: deployment-phase
  #      id: deployment-phase
  #      uses: bc-org/gha-determine-phase@v0.1
  #      with:
  #        event_name: ${{ github.event_name }}
  #        tag: ${{ steps.release.outputs.tag }}
  #    - name: get-hash
  #      id: get-hash
  #      run: |
  #        HASH=$(skopeo inspect docker://quay.io/bcdev/${{ env.APP_NAME }}-lab:${{ steps.release.outputs.tag }} | jq '.Digest')
  #        if [[ "$HASH" == *"sha256"* ]]; then
  #          echo ::set-output name=hash::$HASH
  #        else
  #          echo "No has present. Using none as hash. This will use the version tag instead for deployment."
  #          echo ::set-output name=hash::none
  #        fi
  #    - name: info
  #      run: |
  #        echo "Event: ${{ github.event_name }}"
  #        echo "Deployment Stage: ${{ steps.deployment-phase.outputs.phase }}"
#
  #        echo "Release Tag: ${{ steps.release.outputs.tag }}"
  #        echo "Deployment Release Tag: ${{ steps.deployment-phase.outputs.tag }}"
  #        echo "Deployment Digest: ${{ steps.get-hash.outputs.hash }}"
  #    - name: set-version-tag
  #      uses: bc-org/update-application-version-tags@main
  #      with:
  #        app: ${{ env.APP_NAME }}
  #        phase: ${{ steps.deployment-phase.outputs.phase }}
  #        delimiter: ' '
  #        tag: ${{ steps.deployment-phase.outputs.tag }}
  #        hash: ${{ steps.get-hash.outputs.hash }}
  #        working-directory: "./k8s/${{ env.APP_NAME }}-jh/helm"
  #    - name: cat-result
  #      working-directory: "./k8s/${{ env.APP_NAME }}-jh/helm"
  #      run: |
  #        head values-dev.yaml
  #        head values-stage.yaml
  #    #          No production deployment at the moment
  #    #          head values-prod.yaml
  #    - name: Pushes to another repository
  #      # Don't run if run locally and should be ignored
  #      if: ${{ steps.deployment-phase.outputs.phase != 'ignore' && !env.ACT }}
  #      uses: cpina/github-action-push-to-another-repository@main
  #      env:
  #        API_TOKEN_GITHUB: ${{ secrets.API_TOKEN_GITHUB }}
  #      with:
  #        source-directory: 'k8s'
  #        destination-github-username: 'bc-org'
  #        destination-repository-name: 'k8s-configs'
  #        user-email: bcdev@brockmann-consult.de
  #        target-branch: main
  #        commit-message: ${{ github.event.release }}. Set version to ${{ steps.release.outputs.tag }}
